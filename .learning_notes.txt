Cheats.pdf

Rake
rake -T
see a list of all Rake tasks
rake -T db
see a list of only the database-specific Rake tasks
rake db:test:prepare
copy the schema from the development database to the test database

Generate a Resources
rails g resource name_of_resource field:type field:type......
generates a resource with a given name along with fields and types example: rails g resource registration name:string
email:string how_heard:string event:references

result: 
A migration for creating the registrations database table. A Registration model with a belongs_to declaration.
An empty RegistrationsController.
A set of resource routes.

Common Validation Methods
validates :how_heard, inclusion: { in: ["Blog", "Newsletter"] }
validates that the value of the specified attribute is available in the specified enumerable (array)
validates :role, :exclusion => { :in => ["Admin", "SuperUser"] }
validates that the value of the specified attribute is not available in the specified enumerable (array)

Setting up RSpec
group :test, :development do gem "rspec-rails"
end
group :test do gem "capybara"
end

rails generate rspec:install

Running Specs
rspec path/to/file:linenumber 
example: rspec spec/features/list_events_spec.rb:9 

Common Form Helper Methods
<%= f.select :how_heard, ["Blog", "Newsletter"] %>
returns a select tag and a series of contained option tags for the specified attribute

==================================================
Conventions.pdf
Put as much business logic into the model as you can. 
I DON’T AGREE

Event Model
def free?
price.blank? || price.zero?
end
def spots_left
capacity - registrations.count
end
def sold_out?
spots_left.zero?
end

==================================================
Videos (2015 June)

Video 1 Intro - (blank means nothing I don’t already know at this point in time)
Video 2 Create app - bundle check
Video 3 Views & Controllers - 
Video 4 Models - rake -T, rake db:migrate:status
Video 5 Connecting mvc - number_to_currency(event.price)
Video 6 Migrations - 
Video 7 Helpers - pluralize(@events.size, ‘Event’), truncate(event.description, length: 35, separator: ‘ ‘)
<% if event.price == 0 %>
  <td>Free</td>
<% else %>
  <td><%= number_to_currency(event.price) %>
<% end%>
to
<td><%= format_price(event) %></td>
app/helpers/events_helper.rb
module EventsHelper
  def format_price(event)
    if event.price == 0  # Or event.free?
      <strong>“Free”</strong>.html_safe 
      # Or content_tag(:strong, “Free”)
    else 
      number_to_currency(event.price)
    end
  end
end

app/models/event.rb
class Event < ActiveRecord::Base
  def free?
    price.blank? || price.zero?
  end
end

rails console
>> Time:DATE_FORMATS to show all possible date formats in Rails

config/initializers/time_formats.rb
Time::DATE_FORMATS[:default] = “%d %B, %Y at %I:%M %p”

app/views/events/index.html.erb
<%= event.starts_at %>

Video 8 Routes: Show Page - Good explanation for routing and params[:id]
Video 9 Routes: Linking Pages - app.events_path, app.events_url
localhost:3000/rails/info/routes
link_to(event.name, “/events/#{event.id}”)
get ‘/events/:id’ => ‘events#show’, as: ‘event’
app.event_path(event.id) 
link_to(event.name, event)

Video 10.1 Test-First Setup - rails new events —skip-test-unit, or -T 
rails g rspec:install

Video 10.2 Test-First List Events - rails g controller events --no-test-framework

Video 10.3 Test-First Event Model - rails g controller event --no-test-framework, rake db:test:prepare #copies schema from development db into the test db
OR rake db:schema:load RAILS_ENV=test
Each time a new migration is run in the development db, always follow up with running rake db:test:prepare to copy the schema over to the test db
rake db:migrate
rake db:test:prepare

Video 10.4 Test-First Show An Event - rspec --format doc #shows the describe and it statements OR rspec -f d

Video 10.5 Test-First Link Pages - Uncomment Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f } in spec/rails_helper.rb
Create new file in spec/support/attributes.rb
def movie_attributes(overrides = {})
  { 
    title: "Iron Man", 
    rating: "PG-13",
    total_gross: 318412101,
    description: "Tony Stark builds an armored suit to fight the throes of evil",
    released_on: "2008-05-02"
  }.merge(overrides)
end
movie = Movie.create(movie_attributes(total_gross: 300_000_000)) #overriding the total_gross value)

click_link movie.title
expect(current_path).to eq(movie_path(movie))

Video 10.6 Test-First Free Events - spec/models/model_spec.rb

Video 10.7 Test-First Check In Browser - Movie.create!([{}]), with ! will raise exception if object not created, eg. validation fails

Video 11.1 Forms:Editing - 
expect(find_field('Title').value).to eq(movie.title)
click_button 'Update Movie'
expect(current_path).to eq(movie_path(movie))
fill_in 'Title', with: "Updated Movie Title"

Video 11.2 Forms:Editing - 
In Rails, @instance variables do not live on after the action runs, eg. def update will not have access to the @movie instance variable in def edit.

If you want all of a movie's attributes to be updatable without listing them out, you can call permit!, eg. params.require(:movie).permit!

<form action="/movies/1" method="post">
  <input name="_method" type="hidden" value="patch" />
  ...
</form>
The action says that submitting this form will send the data to /movies/1. By default, forms are submitted with the POST HTTP verb as indicated by the value of the method attribute here. By convention in Rails, POST requests are used to create things. But in this case, Rails knows that we're trying to update a movie, not create a movie. And by convention in Rails, PATCH requests are used to update things. So Rails effectively overrides the HTTP verb by adding a hidden field named _method with a value of patch. (It has to fake it with a hidden field because web browsers can't natively send PATCH requests.)

Video 12 Forms:Creating -
fill_in "Released on", with: (Time.now.year - 1).to_s

Video 13 Partials -
autofocus: true

Video 14 Destroy - 
expect(page).not_to have_text(movie.title)

Video 15 Custom Queries - 
Event.order("name desc")
Event.find_by(name: "name of event", location: "Denver, CO") #finding record with two attributes
Event.where(name: "name of event")
Event.where.not(name: "name of event")
Event.where('price <= 10.00')
Event.where('price <= ?', max_price)
Event.where('starts_at <= ?', Time.now).to_sql #returns sql statement without running it
Event.where('starts_at <= ?', Time.now).order('starts_at')

Movie.where(rating: ["PG", "PG-13"])

released_on: 1.month.from_now
released_on: 1.month.ago
released_on: 3.months.ago
expect(page).not_to have_text(movie.title)
expect(Movie.released).to eq([movie1, movie2, movie3])

Video 16 Migrations Revisited -
expect(page).to have_selector("img[src$='#{movie.image_file_name}']")

def image_for(movie)
  if movie.image_file_name.blank? || movie.image_file_name.nil?
    image_tag("placeholder.png")
  else
    image_tag(movie.image_file_name)
  end
end

fill_in 'Cast', with: "Tom Cruise, Bradley Cooper, Tom Hanks" #with: "has to be one string"
expect(page).to have_text(movie.cast.join(", "))

def movie_attributes(overrides = {})
  { 
    title: "Iron Man", 
    rating: "PG-13",
    total_gross: 318412101,
    description: "Tony Stark builds an armored suit to fight the throes of evil",
    released_on: "2008-05-02",
    image_file_name: "american_sniper.jpg",
    director: "Charlie Chaplin",
    duration: 138,
    cast: ["Tom Cruise", "Bradley Cooper", "Tom Hanks"] #can be 3 items in an Array because that attribute is an Array as defined in the migration
  }.merge(overrides)
end

def movie_params
  params.require(:movie).permit(:title, :description, :rating, :released_on, 
                                    :total_gross, :image_file_name, :director, 
                                    :duration, :cast)
  .tap do |p| 
    p[:cast] = p[:cast].split(",").map(&:strip)
  end
end

Video 17 Layouts

Video 18 Assets

Video 19 Validations

Video 20 The Flash

Video 21 One-to-Many: Models

Video 22 One-to-Many: Nested Resources

Video 23 One-to-Many: Forms

Video 24 One-to-Many: Logic

Video 25 Deployment

Video 26 Wrap Up

==================================================

==================================================

==================================================